d<-rbind(df01,df02,df03,df04,df05,df06,df07,df08,df09,df10,df11,df12)
rm(df01,df02,df03,df04,df05,df06,df07,df08,df09,df10,df11,df12)
names(d)<-c('Bin','Distribution', 'Month')
d$Bin<-as.numeric(as.character(d$Bin))
d<-d[order(d$Bin, d$Month),]
d$Bin<-as.factor(d$Bin)
d
filter(d, Bin==1000)
d[d$Bin=='1000',]
t0<-sqlQuery(myConn, "select left(Policy,10) as Pol, Advantage.[Advantage Prior], Inf.Score, Deductible, [Insurance Amount], case when left(Policy,3) = 'MHO' then 9 else Form end as Form, MPC, [Year Built], CONVERT(FLOAT,LEFT(Effective,4)) as [Effective Year], CONVERT(FLOAT,SUBSTRING(Effective,5,2)) as [Effective Month], CONVERT(FLOAT,LEFT(Inception,4)) as [Inception Year], CONVERT(FLOAT,RIGHT(Inception,2)) as [Inception Month], Inf.CTWP, REGION, [Pay Plan]+[Pay Method] as [Pay Plan], [Billing Events]
from (PCActuarial_HO_Inforce.dbo.[20151231] as Inf left join PCActuarial_HO_Inforce.dbo.Advantage on Inf.Score = Advantage.Score) left join PCActuarial_Jason.dbo.[HO CTWPs] on Inf.CTWP = [HO CTWPs].CTWP")
t0$'Insurance Amount'<-ifelse(t0$'Insurance Amount'<=50000,   1,         # $  0- 50K
ifelse(t0$'Insurance Amount'<=100000,  2,         # $ 50-100K
ifelse(t0$'Insurance Amount'<=150000,  3,         # $100-150K
ifelse(t0$'Insurance Amount'<=200000,  4,         # $150-200K
ifelse(t0$'Insurance Amount'<=250000,  5,         # $200-250K
ifelse(t0$'Insurance Amount'<=300000,  6,         # $250-300K
ifelse(t0$'Insurance Amount'<=350000,  7,         # $300-350K
ifelse(t0$'Insurance Amount'<=500000,  8,         # $350-500K
ifelse(t0$'Insurance Amount'<=1000000, 9,         # $500-  1M
10))))))))) #       $1M+
t0$'Year Built'<-      ifelse(t0$'Year Built'<1940,1,        # 1800-1939
ifelse(t0$'Year Built'<1950,2,        # 1940-1949
ifelse(t0$'Year Built'<1960,3,        # 1950-1959
ifelse(t0$'Year Built'<1970,4,        # 1960-1969
ifelse(t0$'Year Built'<1980,5,        # 1970-1979
ifelse(t0$'Year Built'<1990,6,        # 1980-1989
ifelse(t0$'Year Built'<2000,7,        # 1990-1999
ifelse(t0$'Year Built'<2005,8,        # 2000-2004
9)))))))) #      2005+
t0$Longevity<-         round(t0$'Effective Year'+t0$'Effective Month'/12-t0$'Inception Year'-t0$'Inception Month'/12,4)
t0$Longevity<-         ifelse(t0$Longevity<1.5,  1,          #  0- 1
ifelse(t0$Longevity<3.5,  2,          #  2- 3
ifelse(t0$Longevity<5.5,  3,          #  4- 5
ifelse(t0$Longevity<7.5,  4,          #  6- 7
ifelse(t0$Longevity<9.5,  5,          #  8- 9
ifelse(t0$Longevity<11.5, 6,          # 10-11
ifelse(t0$Longevity<14.5, 7,          # 12-14
ifelse(t0$Longevity<19.5, 8,          # 15-19
ifelse(t0$Longevity<29.5, 9,          #    20s
ifelse(t0$Longevity<39.5,10,          #    30s
11)))))))))) #    40+
t0$'Pay Plan'<-        ifelse(t0$'Pay Plan'=='FE',1,            # Full
ifelse(t0$'Pay Plan'=='FX',1,            # Full
ifelse(t0$'Pay Plan'=='SE',2,            # Semi
ifelse(t0$'Pay Plan'=='SX',2,            # Semi
ifelse(t0$'Pay Plan'=='QE',3,            # Quarter
ifelse(t0$'Pay Plan'=='QX',3,            # Quarter
ifelse(t0$'Pay Plan'=='ME',4,            # Mo. EFT
ifelse(t0$'Pay Plan'=='MX',5,            # Mo. Direct
ifelse(t0$'Pay Plan'=='LE',6,            # Lien
ifelse(t0$'Pay Plan'=='LX',6,9)))))))))) # Lien
t0$'Billing Events'<-  ifelse(t0$'Billing Events'< 1,1,      #     0
ifelse(t0$'Billing Events'< 2,2,      #     1
ifelse(t0$'Billing Events'< 4,3,      #  2- 3
ifelse(t0$'Billing Events'< 7,4,      #  4- 6
ifelse(t0$'Billing Events'<11,5,      #  7-10
ifelse(t0$'Billing Events'<20,6,      # 11-19
7)))))) #    20+
t0$ScoreGroup<-ifelse(t0$Score %in% c(0,998,999), 'XYZ',
ifelse(t0$Score >= 976, 'AB',
ifelse(t0$Score >= 955, 'AB',
ifelse(t0$Score >= 933, 'CD',
ifelse(t0$Score >= 911, 'CD',
ifelse(t0$Score >= 890, 'EF',
ifelse(t0$Score >= 868, 'EF',
ifelse(t0$Score >= 846, 'GH',
ifelse(t0$Score >= 812, 'GH',
ifelse(t0$Score >= 783, 'IJ',
ifelse(t0$Score >= 754, 'IJ',
ifelse(t0$Score >= 725, 'KL',
ifelse(t0$Score >= 695, 'KL',
ifelse(t0$Score >= 665, 'MN',
ifelse(t0$Score >= 632, 'MN',
ifelse(t0$Score >= 595, 'OP',
ifelse(t0$Score >= 565, 'OP',
ifelse(t0$Score >= 549, 'QR',
ifelse(t0$Score >= 528, 'QR',
ifelse(t0$Score >= 511, 'ST',
ifelse(t0$Score >= 1, 'ST','error')))))))))))))))))))))
######################################################################################################################################################################################################################################################
# Pulling in 1st prior year lapse data from SQL.
t1<-sqlQuery(myConn, "select left(Policy,10) as Pol, Advantage.[Advantage Prior], Inf.Score, Deductible, [Insurance Amount], case when left(Policy,3) = 'MHO' then 9 else Form end as Form, MPC, [Year Built], CONVERT(FLOAT,LEFT(Effective,4)) as [Effective Year], CONVERT(FLOAT,SUBSTRING(Effective,5,2)) as [Effective Month], CONVERT(FLOAT,LEFT(Inception,4)) as [Inception Year], CONVERT(FLOAT,RIGHT(Inception,2)) as [Inception Month], Inf.CTWP, REGION, [Pay Plan]+[Pay Method] as [Pay Plan], [Billing Events]
from (PCActuarial_HO_Inforce.dbo.[20141231] as Inf left join PCActuarial_HO_Inforce.dbo.Advantage on Inf.Score = Advantage.Score) left join PCActuarial_Jason.dbo.[HO CTWPs] on Inf.CTWP = [HO CTWPs].CTWP")
t1$'Insurance Amount'<-ifelse(t1$'Insurance Amount'<=50000,   1,         # $  0- 50K
ifelse(t1$'Insurance Amount'<=100000,  2,         # $ 50-100K
ifelse(t1$'Insurance Amount'<=150000,  3,         # $100-150K
ifelse(t1$'Insurance Amount'<=200000,  4,         # $150-200K
ifelse(t1$'Insurance Amount'<=250000,  5,         # $200-250K
ifelse(t1$'Insurance Amount'<=300000,  6,         # $250-300K
ifelse(t1$'Insurance Amount'<=350000,  7,         # $300-350K
ifelse(t1$'Insurance Amount'<=500000,  8,         # $350-500K
ifelse(t1$'Insurance Amount'<=1000000, 9,         # $500-  1M
10))))))))) #       $1M+
t1$'Year Built'<-      ifelse(t1$'Year Built'<1940,1,        # 1800-1939
ifelse(t1$'Year Built'<1950,2,        # 1940-1949
ifelse(t1$'Year Built'<1960,3,        # 1950-1959
ifelse(t1$'Year Built'<1970,4,        # 1960-1969
ifelse(t1$'Year Built'<1980,5,        # 1970-1979
ifelse(t1$'Year Built'<1990,6,        # 1980-1989
ifelse(t1$'Year Built'<2000,7,        # 1990-1999
ifelse(t1$'Year Built'<2005,8,        # 2000-2004
9)))))))) #      2005+
t1$Longevity<-         round(t1$'Effective Year'+t1$'Effective Month'/12-t1$'Inception Year'-t1$'Inception Month'/12,4)
t1$Longevity<-         ifelse(t1$Longevity<1.5,  1,          #  0- 1
ifelse(t1$Longevity<3.5,  2,          #  2- 3
ifelse(t1$Longevity<5.5,  3,          #  4- 5
ifelse(t1$Longevity<7.5,  4,          #  6- 7
ifelse(t1$Longevity<9.5,  5,          #  8- 9
ifelse(t1$Longevity<11.5, 6,          # 10-11
ifelse(t1$Longevity<14.5, 7,          # 12-14
ifelse(t1$Longevity<19.5, 8,          # 15-19
ifelse(t1$Longevity<29.5, 9,          #    20s
ifelse(t1$Longevity<39.5,10,          #    30s
11)))))))))) #    40+
t1$'Pay Plan'<-        ifelse(t1$'Pay Plan'=='FE',1,            # Full
ifelse(t1$'Pay Plan'=='FX',1,            # Full
ifelse(t1$'Pay Plan'=='SE',2,            # Semi
ifelse(t1$'Pay Plan'=='SX',2,            # Semi
ifelse(t1$'Pay Plan'=='QE',3,            # Quarter
ifelse(t1$'Pay Plan'=='QX',3,            # Quarter
ifelse(t1$'Pay Plan'=='ME',4,            # Mo. EFT
ifelse(t1$'Pay Plan'=='MX',5,            # Mo. Direct
ifelse(t1$'Pay Plan'=='LE',6,            # Lien
ifelse(t1$'Pay Plan'=='LX',6,9)))))))))) # Lien
t1$'Billing Events'<-  ifelse(t1$'Billing Events'< 1,1,      #     0
ifelse(t1$'Billing Events'< 2,2,      #     1
ifelse(t1$'Billing Events'< 4,3,      #  2- 3
ifelse(t1$'Billing Events'< 7,4,      #  4- 6
ifelse(t1$'Billing Events'<11,5,      #  7-10
ifelse(t1$'Billing Events'<20,6,      # 11-19
7)))))) #    20+
t1$ScoreGroup<-ifelse(t1$Score %in% c(0,998,999), 'XYZ',
ifelse(t1$Score >= 976, 'AB',
ifelse(t1$Score >= 955, 'AB',
ifelse(t1$Score >= 933, 'CD',
ifelse(t1$Score >= 911, 'CD',
ifelse(t1$Score >= 890, 'EF',
ifelse(t1$Score >= 868, 'EF',
ifelse(t1$Score >= 846, 'GH',
ifelse(t1$Score >= 812, 'GH',
ifelse(t1$Score >= 783, 'IJ',
ifelse(t1$Score >= 754, 'IJ',
ifelse(t1$Score >= 725, 'KL',
ifelse(t1$Score >= 695, 'KL',
ifelse(t1$Score >= 665, 'MN',
ifelse(t1$Score >= 632, 'MN',
ifelse(t1$Score >= 595, 'OP',
ifelse(t1$Score >= 565, 'OP',
ifelse(t1$Score >= 549, 'QR',
ifelse(t1$Score >= 528, 'QR',
ifelse(t1$Score >= 511, 'ST',
ifelse(t1$Score >= 1, 'ST','error')))))))))))))))))))))
######################################################################################################################################################################################################################################################
# Pulling in 2nd prior year lapse data from SQL.
t2<-sqlQuery(myConn, "select left(Policy,10) as Pol, Advantage.[Advantage Prior], Inf.Score, Deductible, [Insurance Amount], case when left(Policy,3) = 'MHO' then 9 else Form end as Form, MPC, [Year Built], CONVERT(FLOAT,LEFT(Effective,4)) as [Effective Year], CONVERT(FLOAT,SUBSTRING(Effective,5,2)) as [Effective Month], CONVERT(FLOAT,LEFT(Inception,4)) as [Inception Year], CONVERT(FLOAT,RIGHT(Inception,2)) as [Inception Month], Inf.CTWP, REGION, [Pay Plan]+[Pay Method] as [Pay Plan], [Billing Events]
from (PCActuarial_HO_Inforce.dbo.[20131231] as Inf left join PCActuarial_HO_Inforce.dbo.Advantage on Inf.Score = Advantage.Score) left join PCActuarial_Jason.dbo.[HO CTWPs] on Inf.CTWP = [HO CTWPs].CTWP")
# Note that the SmartPay emelents are commented out here and will need to be added back in once they're in the SQL table.
# Became available in December 2013 file.
t2$'Insurance Amount'<-ifelse(t2$'Insurance Amount'<=50000,   1,         # $  0- 50K
ifelse(t2$'Insurance Amount'<=100000,  2,         # $ 50-100K
ifelse(t2$'Insurance Amount'<=150000,  3,         # $100-150K
ifelse(t2$'Insurance Amount'<=200000,  4,         # $150-200K
ifelse(t2$'Insurance Amount'<=250000,  5,         # $200-250K
ifelse(t2$'Insurance Amount'<=300000,  6,         # $250-300K
ifelse(t2$'Insurance Amount'<=350000,  7,         # $300-350K
ifelse(t2$'Insurance Amount'<=500000,  8,         # $350-500K
ifelse(t2$'Insurance Amount'<=1000000, 9,         # $500-  1M
10))))))))) #       $1M+
t2$'Year Built'<-      ifelse(t2$'Year Built'<1940,1,        # 1800-1939
ifelse(t2$'Year Built'<1950,2,        # 1940-1949
ifelse(t2$'Year Built'<1960,3,        # 1950-1959
ifelse(t2$'Year Built'<1970,4,        # 1960-1969
ifelse(t2$'Year Built'<1980,5,        # 1970-1979
ifelse(t2$'Year Built'<1990,6,        # 1980-1989
ifelse(t2$'Year Built'<2000,7,        # 1990-1999
ifelse(t2$'Year Built'<2005,8,        # 2000-2004
9)))))))) #      2005+
t2$Longevity<-         round(t2$'Effective Year'+t2$'Effective Month'/12-t2$'Inception Year'-t2$'Inception Month'/12,4)
t2$Longevity<-         ifelse(t2$Longevity<1.5,  1,          #  0- 1
ifelse(t2$Longevity<3.5,  2,          #  2- 3
ifelse(t2$Longevity<5.5,  3,          #  4- 5
ifelse(t2$Longevity<7.5,  4,          #  6- 7
ifelse(t2$Longevity<9.5,  5,          #  8- 9
ifelse(t2$Longevity<11.5, 6,          # 10-11
ifelse(t2$Longevity<14.5, 7,          # 12-14
ifelse(t2$Longevity<19.5, 8,          # 15-19
ifelse(t2$Longevity<29.5, 9,          #    20s
ifelse(t2$Longevity<39.5,10,          #    30s
11)))))))))) #    40+
#t2$'Pay Plan'<-NA
t2$'Pay Plan'<-        ifelse(t2$'Pay Plan'=='FE',1,            # Full
ifelse(t2$'Pay Plan'=='FX',1,            # Full
ifelse(t2$'Pay Plan'=='SE',2,            # Semi
ifelse(t2$'Pay Plan'=='SX',2,            # Semi
ifelse(t2$'Pay Plan'=='QE',3,            # Quarter
ifelse(t2$'Pay Plan'=='QX',3,            # Quarter
ifelse(t2$'Pay Plan'=='ME',4,            # Mo. EFT
ifelse(t2$'Pay Plan'=='MX',5,            # Mo. Direct
ifelse(t2$'Pay Plan'=='LE',6,            # Lien
ifelse(t2$'Pay Plan'=='LX',6,9)))))))))) # Lien
#t2$'Billing Events'<-NA
t2$'Billing Events'<-  ifelse(t2$'Billing Events'< 1,1,      #     0
ifelse(t2$'Billing Events'< 2,2,      #     1
ifelse(t2$'Billing Events'< 4,3,      #  2- 3
ifelse(t2$'Billing Events'< 7,4,      #  4- 6
ifelse(t2$'Billing Events'<11,5,      #  7-10
ifelse(t2$'Billing Events'<20,6,      # 11-19
7)))))) #    20+
t2$ScoreGroup<-ifelse(t2$Score %in% c(0,998,999), 'XYZ',
ifelse(t2$Score >= 976, 'AB',
ifelse(t2$Score >= 955, 'AB',
ifelse(t2$Score >= 933, 'CD',
ifelse(t2$Score >= 911, 'CD',
ifelse(t2$Score >= 890, 'EF',
ifelse(t2$Score >= 868, 'EF',
ifelse(t2$Score >= 846, 'GH',
ifelse(t2$Score >= 812, 'GH',
ifelse(t2$Score >= 783, 'IJ',
ifelse(t2$Score >= 754, 'IJ',
ifelse(t2$Score >= 725, 'KL',
ifelse(t2$Score >= 695, 'KL',
ifelse(t2$Score >= 665, 'MN',
ifelse(t2$Score >= 632, 'MN',
ifelse(t2$Score >= 595, 'OP',
ifelse(t2$Score >= 565, 'OP',
ifelse(t2$Score >= 549, 'QR',
ifelse(t2$Score >= 528, 'QR',
ifelse(t2$Score >= 511, 'ST',
ifelse(t2$Score >= 1, 'ST','error')))))))))))))))))))))
######################################################################################################################################################################################################################################################
# Gets previous period lapse data for all attributes
dataPrev<-merge(x=t2, y=t1, by='Pol', all.x=T)
dataPrev$Persist<-ifelse(is.na(dataPrev[,23]),'N','Y')
# Gets current period lapse data for all attributes
dataCurr<-merge(x=t1, y=t0, by='Pol', all.x=T)
dataCurr$Persist<-ifelse(is.na(dataCurr[,23]),'N','Y')
# Gets NB counts for most recent full year
added<-merge(x=t0, y=t1, by='Pol', all.x=T)
added<-added[is.na(added[,23]),]
persist<-data.frame(table(subset(dataPrev, Persist=='Y' & Deductible.x %in% c('100','250','500','750','1000','1500','2500','5000','7500','10000'))$'Deductible.x'))
lapse<-data.frame(table(subset(dataPrev, Persist=='N' & Deductible.x %in% c('100','250','500','750','1000','1500','2500','5000','7500','10000'))$'Deductible.x'))
prev<-merge(x=persist, y=lapse, by='Var1', all.x=T)
names(prev)<-c('Bin','Persist','Lapse')
prev$LapseRate<-prev$Lapse/(prev$Lapse+prev$Persist)
rm(lapse,persist)
# Current lapse rates
persist<-data.frame(table(subset(dataCurr, Persist=='Y' & Deductible.x %in% c('100','250','500','750','1000','1500','2500','5000','7500','10000'))$'Deductible.x'))
lapse<-data.frame(table(subset(dataCurr, Persist=='N' & Deductible.x %in% c('100','250','500','750','1000','1500','2500','5000','7500','10000'))$'Deductible.x'))
curr<-merge(x=persist, y=lapse, by='Var1', all.x=T)
names(curr)<-c('Bin','Persist','Lapse')
curr$Lapse<-ifelse(is.na(curr$Lapse),0,curr$Lapse)
curr$LapseRate<-curr$Lapse/(curr$Lapse+curr$Persist)
rm(lapse,persist)
# Creates lines data
lines<-merge(x=prev, y=curr, by=names(prev)[1])
lines<-lines[,c('Bin','LapseRate.x','LapseRate.y')]
names(lines)<-c(names(prev)[1],'prevLapseRate','currLapseRate')
lines<-melt(lines)
rm(prev,curr)
lines
persist<-data.frame(table(subset(dataPrev, Persist=='Y')$'ScoreGroup.x'))
#lapse<-data.frame(table(subset(dataPrev, Persist=='N')$'Advantage Prior.x'))
lapse<-data.frame(table(subset(dataPrev, Persist=='N')$'ScoreGroup.x'))
prev<-merge(x=persist, y=lapse, by='Var1', all.x=T)
names(prev)<-c('Bin','Persist','Lapse')
prev$LapseRate<-prev$Lapse/(prev$Lapse+prev$Persist)
rm(lapse,persist)
# Current lapse rates
#persist<-data.frame(table(subset(dataCurr, Persist=='Y')$'Advantage Prior.x'))
persist<-data.frame(table(subset(dataCurr, Persist=='Y')$'ScoreGroup.x'))
#lapse<-data.frame(table(subset(dataCurr, Persist=='N')$'Advantage Prior.x'))
lapse<-data.frame(table(subset(dataCurr, Persist=='N')$'ScoreGroup.x'))
curr<-merge(x=persist, y=lapse, by='Var1', all.x=T)
names(curr)<-c('Bin','Persist','Lapse')
curr$Lapse<-ifelse(is.na(curr$Lapse),0,curr$Lapse)
curr$LapseRate<-curr$Lapse/(curr$Lapse+curr$Persist)
rm(lapse,persist)
# Creates lines data
lines<-merge(x=prev, y=curr, by=names(prev)[1])
lines<-lines[,c('Bin','LapseRate.x','LapseRate.y')]
names(lines)<-c(names(prev)[1],'prevLapseRate','currLapseRate')
lines<-melt(lines)
rm(prev,curr)
lines
# Creates monthly DFs by MPC distribution
for (i in 1:12) {
df<-data.frame(table(dataframeList[[i]]$'MPC')) #df<-data.frame(table(dataframeList[[i]]$'MPC',dataframeList[[i]]$'Form'))  #df<-data.frame(table(dataframeList[[i]]$'MPC',dataframeList[[i]]$'REGION'))
df$Freq<-df$Freq / sum(df$Freq)
df$Month<-paste0(ifelse(i<10,'0',''),i)
assign(
paste0(
ifelse(i<10,'df0','df'),
i),
df
)
}
rm(df)
d<-rbind(df01,df02,df03,df04,df05,df06,df07,df08,df09,df10,df11,df12)
rm(df01,df02,df03,df04,df05,df06,df07,df08,df09,df10,df11,df12)
names(d)<-c('Bin','Distribution', 'Month')
d
for (i in 1:12) {
df<-data.frame(table(dataframeList[[i]]$'CCC'))
df$Freq<-df$Freq / sum(df$Freq)
df$Month<-paste0(ifelse(i<10,'0',''),i)
assign(
paste0(
ifelse(i<10,'df0','df'),
i),
df
)
}
rm(df)
d<-rbind(df01,df02,df03,df04,df05,df06,df07,df08,df09,df10,df11,df12)
rm(df01,df02,df03,df04,df05,df06,df07,df08,df09,df10,df11,df12)
names(d)<-c('Bin','Distribution', 'Month')
d$Bin<-as.numeric(as.character(d$Bin))
d$Bin<-ifelse(d$Bin %in% c(0,1,9), d$Bin, '2+')
d<-aggregate(d$Distribution, by=list(d$Bin, d$Month), FUN=sum)
names(d)<-c('Bin','Month','Distribution')
d
d[d$Bin=='0',]
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
this_day<-today()
help(package = lubridate)
this_day<-today()
this_day
year(this_day)
month(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment<-now()
this_moment
year(this_moment)
month(this_moment)
hour(this_moment)
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment<-update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
?now
nyc<-now("America/New_York")
nyc
depart<-nyc + days(2)
depart
depart<-update(depart, hours=17, minutes=34)
depart
arrive<-depart + hours(15) + minutes(50)
?with_tz
arrive<-with_tz(arrive, 'Asia/Hong_Kong')
arrive
last_time<-mdy('June 17, 2008', tz='Singapore')
last_time
?new_interval
how_long<-new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
quit()
me12<-20151231  #<<<###<<<###<<<###<<<###<<<###<<<###<<<###<<<###<<<###<<<###<<<###<<<###<<<###<<<###<<<###
library(Rmisc)    # Needed for multiplot().
library(reshape2) # Needed for melt().
library(plyr)     # Needed for count()
library(RODBC)  # Needed to read data from SQL Server.
myConn<-odbcConnect('SP2-ACTUDB')
## Creates the dates associated with the other 11 inforce files required, then puts all 12 into a list.
library(lubridate) # Needed for ymd() handling in data import.
for (i in 11:1) {
tempDate<-(ymd(strptime(me12, '%Y%m%d')) + 60*60*24) %m-% months(12 - i) - 60*60*24
assign(
paste0(
ifelse(i<10,'me0','me'),
i),
year(tempDate)*10000 + month(tempDate)*100 + day(tempDate)
)
}
dateList<-list(me01,me02,me03,me04,me05,me06,me07,me08,me09,me10,me11,me12)
rm(tempDate,me01,me02,me03,me04,me05,me06,me07,me08,me09,me10,me11)      # keeping me12 for later
## Creates SQL queries for all months.
for (i in 1:12) {
assign(
paste0(
ifelse(i<10,'q0','q')
,i)
,paste0("select Inf.Policy, Inf.Inception, Inf.Effective, Inf.CTWP, case when left(Inf.Policy,3)='MHO' then 9 else Inf.Form end as Form, Inf.[Insurance Amount], Inf.Deductible, Inf.[Year Built], Inf.Advantage, Inf.MPC, Inf.[Billing Events], Inf.[Pay Plan], Inf.[Pay Method], Inf.Score, [Advantage].[Advantage Prior], [HO CTWPs].REGION, Inf.CCC                   from ([PCActuarial_HO_Inforce].[dbo].[",
dateList[[i]],
"] as [Inf] left join [PCActuarial_HO_Inforce].[dbo].[Advantage] on [Inf].[Score] = [Advantage].[Score]) left join [PCActuarial_Jason].[dbo].[HO CTWPs] on [Inf].[CTWP] = [HO CTWPs].[CTWP] where [Inception] = '",
floor(dateList[[i]]/100),
"'"
)
)
}
queryList<-list(q01,q02,q03,q04,q05,q06,q07,q08,q09,q10,q11,q12)
rm(q01,q02,q03,q04,q05,q06,q07,q08,q09,q10,q11,q12)
## Creates monthly dataframes using the dates in dateList and the queries in queryList.
for (i in 1:12) {
assign(
paste0(
ifelse(i<10,'d0','d'),
i)
,sqlQuery(
myConn,
queryList[[i]]
)
)
}
dataframeList<-list(d01,d02,d03,d04,d05,d06,d07,d08,d09,d10,d11,d12)
rm(i,queryList,d01,d02,d03,d04,d05,d06,d07,d08,d09,d10,d11,d12)
for (i in 1:12) {
df<-data.frame(table(subset(dataframeList[[i]], Deductible %in% c(100,250,500,750,1000,1500,2500,5000,7500,10000))$'Deductible'))
df$Freq<-df$Freq / sum(df$Freq)
df$Month<-paste0(ifelse(i<10,'0',''),i)
assign(
paste0(
ifelse(i<10,'df0','df'),
i),
df
)
}
rm(df)
d<-rbind(df01,df02,df03,df04,df05,df06,df07,df08,df09,df10,df11,df12)
rm(df01,df02,df03,df04,df05,df06,df07,df08,df09,df10,df11,df12)
names(d)<-c('Bin','Distribution', 'Month')
d$Bin<-as.numeric(as.character(d$Bin))
d<-d[order(d$Bin, d$Month),]
d$Bin<-as.factor(d$Bin)
labels<-c('100','250','500','750', '1,000', '1,500','2,500','5,000','7,500','10,000')
d
d[d$Bin=='100',]
d[d$Bin=='1000',]
d[d$Bin=='100',]
d
dataframeList[[12]]
unique(dataframeList[[12]]$Deductible)
setwd("//SP1-FSHOME/Users/JCULP/")
path    <- getwd()
trainX     <- read.table(paste0(path, "/UCI HAR Dataset/train/X_train.txt"))
path
setwd("//SP1-FSHOME/Users/JCULP/")
getwd()
setwd("SP1-FSHOME/Users/JCULP/")
setwd("//SP1-FSHOME/Users/JCULP")
getwd()
setwd("H:/")
path    <- getwd()
path
setwd("H:\getting.and.cleaning.data")
setwd("//SP1-FSHOME/Users/JCULP/getting.and.cleaning.data")
setwd("//SP1-FSHOME/Users/JCULP/getting.and.cleaning.data")
setwd("H:\getting.and.cleaning.data")
setwd("H:/getting.and.cleaning.data")
path    <- getwd()
trainX     <- read.table(paste0(path, "/UCI HAR Dataset/train/X_train.txt"))
trainX$set <- "train"
testX      <- read.table(paste0(path, "/UCI HAR Dataset/test/X_test.txt"))
testX$set  <- "test"
x          <- rbind(trainX, testX)
features <- read.table(paste0(path, "/UCI HAR Dataset/features.txt"))
features <- as.character(features[, 2])
names(x) <- features
rm(trainX, testX)
trainY   <- read.table(paste0(path, "/UCI HAR Dataset/train/y_train.txt"))
testY    <- read.table(paste0(path, "/UCI HAR Dataset/test/y_test.txt"))
y        <- rbind(trainY, testY)
names(y) <- "activity.code"
rm(trainY, testY)
trainSubject   <- read.table(paste0(path, "/UCI HAR Dataset/train/subject_train.txt"))
testSubject    <- read.table(paste0(path, "/UCI HAR Dataset/test/subject_test.txt"))
subject        <- rbind(trainSubject, testSubject)
names(subject) <- "subject"
rm(trainSubject, testSubject)
data <- cbind(y, subject, x)
features.all      <- names(data)
features.mean.std <- features.all[grepl("mean|std|activity|subject", tolower(features.all))]
data.mean.std     <- data[, features.mean.std]
# 3. Uses descriptive activity names to name the activities in the data set.
activity.labels          <- read.table(paste0(path,"/UCI HAR Dataset/activity_labels.txt"))
names(activity.labels)   <- c("activity.code", "activity")
activity.labels$activity <- tolower(activity.labels$activity)
activity.labels$activity <- gsub("_", ".", activity.labels$activity)
data.mean.std <- merge(activity.labels, data.mean.std)
data.mean.std$activity.code <- NULL
# 4. Appropriately labels the data set with descriptive variable names.
features.mean.std       <- names(data.mean.std)
features.mean.std.clean <- features.mean.std
features.mean.std.clean <- tolower(features.mean.std.clean)
features.mean.std.clean <- gsub("\\(|\\)","",features.mean.std.clean)
features.mean.std.clean <- gsub("-|,",".",features.mean.std.clean)
names(data.mean.std)    <- features.mean.std.clean
write.table(data.tidy, paste0(path,"data.tidy.txt"), row.names = FALSE)
library(dplyr)
data.tidy <- data.frame(summarize_each(group_by(data.mean.std, activity, subject), funs(mean)))
write.table(data.tidy, paste0(path,"data.tidy.txt"), row.names = FALSE)
paste0(path,"data.tidy.txt")
write.table(data.tidy, paste0(path,"/data.tidy.txt"), row.names = FALSE)
write.table(data.tidy, paste0(path,"/data.tidy.txt"), row.names = FALSE)
